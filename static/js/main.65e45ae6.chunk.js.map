{"version":3,"sources":["userData.js","pages/Main/index.js","pages/Camera/index.js","routes.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["data","Main","useEffect","console","log","users","map","item","className","src","imageUrl","alt","name","id","useState","result","setResult","delay","onError","error","onScan","resul","Routes","component","path","exact","Camera","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.65e45ae6.chunk.js","sourcesContent":["const data = [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"USUÁRIO 1\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar1.jpg\",\r\n      \"token\": \"111111\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"USUÁRIO 2\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar2.jpg\",\r\n      \"token\": \"222222\"\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"name\": \"USUÁRIO 3\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar3.jpg\",\r\n      \"token\": \"333333\"\r\n    },\r\n    {\r\n      \"id\": 4,\r\n      \"name\": \"USUÁRIO 4\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar4.jpg\",\r\n      \"token\": \"444444\"\r\n    },\r\n    {\r\n      \"id\": 5,\r\n      \"name\": \"USUÁRIO 5\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar5.jpg\",\r\n      \"token\": \"555555\"\r\n    }\r\n   \r\n  ]\r\n  \r\n  export default data;","import React, {useEffect} from \"react\";\r\nimport users from '../../userData';\r\nimport './index.css';\r\n\r\nexport default function Main(){\r\n    useEffect(()=>{\r\n      console.log(users);\r\n    },[])\r\n  \r\n  \r\n\r\n    return (\r\n      <>\r\n        {users.map(item=>(\r\n          <div className='User' key={item.id}>\r\n            <img className='Image' src={item.imageUrl} alt='imagem de perfil'/>\r\n            <p className='Name'>{item.name}</p>\r\n          </div>\r\n        ))}\r\n      </>\r\n    );\r\n}","import React,  { useState } from 'react';\r\nimport QrReader from 'react-web-qr-reader';\r\nimport './camera.css';\r\n\r\n\r\nfunction Main() {\r\n  const delay = 500;\r\n\r\n\r\n  const [result, setResult] = useState('No result');\r\n\r\n  const handleScan = (resul) => {\r\n    if (resul) {\r\n      setResult(resul);\r\n    }\r\n\r\n    console.log(result);\r\n  };\r\n\r\n  const handleError = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      \r\n      <div className=\"camera\">\r\n        \r\n        <QrReader \r\n          delay={delay}\r\n          onError={handleError}\r\n          onScan={handleScan}\r\n          />\r\n        </div>\r\n    </div>\r\n  \r\n  );\r\n};\r\n\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Route, BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Main from './pages/Main';\r\nimport Camera from './pages/Camera';\r\n\r\n\r\nconst Routes = () => (\r\n       <BrowserRouter>\r\n           <Route component = { Main }  path=\"/\" exact />\r\n           <Route component = { Camera }  path=\"/camera\" />\r\n      \r\n       </BrowserRouter>\r\n   )\r\n\r\n\r\nexport default Routes;","import React from 'react';\r\n\r\nimport Routes from './routes';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n   \r\n      <Routes />\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}