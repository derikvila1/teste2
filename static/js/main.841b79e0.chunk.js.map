{"version":3,"sources":["userData.js","pages/Main/index.js","pages/Camera/index.js","pages/Usb/index.js","routes.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["data","Main","useEffect","console","log","users","map","item","className","src","imageUrl","alt","name","id","to","Camera","useState","cameraType","setCameraType","result","setResult","facingMode","style","height","width","delay","onError","error","onScan","resul","user","filter","token","alert","Switch","checked","onClick","event","target","inputProps","Card","CardContent","auth","CardActions","Button","size","Click","navigator","usb","requestDevice","filters","then","device","productId","toString","vendorId","catch","Usb","Routes","component","path","exact","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.841b79e0.chunk.js","sourcesContent":["const data = [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"USUÁRIO 1\",\r\n      \"auth\": true,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar1.jpg\",\r\n      \"token\": \"111111\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"USUÁRIO 2\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar2.jpg\",\r\n      \"token\": \"222222\"\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"name\": \"USUÁRIO 3\",\r\n      \"auth\": true,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar3.jpg\",\r\n      \"token\": \"333333\"\r\n    },\r\n    {\r\n      \"id\": 4,\r\n      \"name\": \"USUÁRIO 4\",\r\n      \"auth\": false,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar4.jpg\",\r\n      \"token\": \"444444\"\r\n    },\r\n    {\r\n      \"id\": 5,\r\n      \"name\": \"USUÁRIO 5\",\r\n      \"auth\": true,\r\n      \"imageUrl\":\"https://cdn.quasar.dev/img/avatar5.jpg\",\r\n      \"token\": \"555555\"\r\n    }\r\n   \r\n  ]\r\n  \r\n  export default data;","import React, {useEffect} from \"react\";\r\n\r\nimport {Link} from 'react-router-dom';\r\nimport users from '../../userData';\r\nimport './index.css';\r\n\r\nexport default function Main(){\r\n    useEffect(()=>{\r\n      console.log(users);\r\n    },[])\r\n  \r\n  \r\n\r\n    return (\r\n      \r\n      <div>\r\n      <>\r\n        {users.map(item=>(\r\n          <div className='User' key={item.id}>\r\n            <img className='Image' src={item.imageUrl} alt='imagem de perfil'/>\r\n            <p className='Name'>{item.name}</p>\r\n          </div>\r\n        ))}\r\n      </>\r\n\r\n     \r\n        <Link to= \"/camera\">LEITOR DE QRCODE</Link>\r\n        <Link to= \"/usb\">USB ANDROID</Link>\r\n     \r\n    </div>\r\n   \r\n    );\r\n}","import React,  { useState } from 'react';\r\nimport QrReader from 'react-web-qr-reader';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link} from 'react-router-dom';\r\nimport users from '../../userData';\r\nimport './index.css';\r\n\r\n\r\n\r\nfunction Camera() {\r\n  const delay = 500;\r\n  const [cameraType,setCameraType] = useState(false);\r\n\r\n  const [result, setResult] = useState(null);\r\n\r\n  const handleScan = (resul) => {\r\n    console.log(resul)\r\n    if (resul) {\r\n      const user = users.filter(item=>item.token===resul.data)[0] ||null;\r\n      setResult(user);\r\n      if(user == null) alert('QRCODE INVÁLIDO!')\r\n    }\r\n  };\r\n\r\n  const handleError = (error) => {\r\n    console.log(error);\r\n  };\r\n  const previewStyle = {\r\n    height: 240,\r\n    width: 320,\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setCameraType(event.target.checked);\r\n  };\r\n  return (\r\n    <div className=\"Container\">\r\n      \r\n      {\r\n        result==null ? \r\n        (\r\n          <>\r\n          <div className=\"containerCamera\">\r\n\r\n            <div className=\"Camera\">\r\n              <QrReader \r\n                facingMode={cameraType?'user':'environment'}\r\n                style={previewStyle}\r\n                delay={delay}\r\n                onError={handleError}\r\n                onScan={handleScan}\r\n                />\r\n            </div>\r\n                <Switch\r\n                  checked={cameraType}\r\n                  onClick={handleChange}\r\n                  name=\"CameraType\"\r\n                  inputProps={{ 'aria-label': 'switch camera type' }}\r\n                  />\r\n\r\n              <Link to= \"/\">HOME</Link>\r\n          </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Card className='card'>\r\n              <CardContent>\r\n                <img src={result.imageUrl} alt='user'/>\r\n                <p>Nome: {result.name}</p>\r\n                <p>Token: {result.token}</p>\r\n                {result.auth && \r\n                \r\n                <p className=\"allow\">AUTORIZADO</p>\r\n                }\r\n                \r\n                {!result.auth && \r\n                  <div className='notAllow'>NÃO AUTORIZADO!!!</div>\r\n                }\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" onClick={()=>setResult(null)}>OK</Button>\r\n              </CardActions>\r\n            </Card>\r\n          </>\r\n        )}\r\n\r\n    </div>\r\n  \r\n  );\r\n};\r\n\r\n\r\nexport default Camera;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './index.css';\r\n\r\nfunction Click(){\r\n  navigator.usb.requestDevice({ filters: [\r\n   \r\n  ]})\r\n  .then(device => {\r\n    console.log(device)\r\n    console.log(device.productId.toString(16))\r\n    console.log(device.vendorId.toString(16))\r\n  })\r\n    .catch(error => {\r\n    console.log(error)\r\n  })\r\n};\r\n\r\nfunction Usb() {\r\n\r\n  return (\r\n    <Button onClick={Click} >Conect</Button>\r\n\r\n  );\r\n\r\n};\r\n\r\n\r\nexport default Usb;\r\n","import React from 'react';\r\nimport { Route, BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Main from './pages/Main';\r\nimport Camera from './pages/Camera';\r\nimport Usb from './pages/Usb';\r\n\r\n\r\nconst Routes = () => (\r\n       <BrowserRouter>\r\n           <Route component = { Main }  path=\"/\" exact />\r\n           <Route component = { Camera }  path=\"/camera\" />\r\n           <Route component = { Usb }  path=\"/usb\" />\r\n      \r\n       </BrowserRouter>\r\n   )\r\n\r\n\r\nexport default Routes;","import React from 'react';\r\nimport Routes from './routes';\r\nimport \"./app.css\";\r\n\r\nfunction App() {\r\n  return (\r\n   <div className=\"App-header\">\r\n\r\n     <Routes />\r\n   </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}